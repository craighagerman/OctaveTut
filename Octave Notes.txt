Octave Tutorial: Basic Operations in Octave
==============================================================

Help
-----
Can type 'help <something>' to get information on something
e.g. 
   >> help eye
   >> help rand
   >> help help

Comments
---------
comments start with %
e.g.
   % this is a comment


Block Comments
-----------------
#{   ...   #}
 OR
%{   ...   %}


Prompt
------
change the prompt (command line) with PS1('new_prompt');
e.g.
   PS1('>> ');

Load Files
----------
load external file with
OR

e.g.


Supressing Output
-----------------
use a colon to suppress output
e.g.
   >> a = 3
   a = 3          % output enabled
   >> a = 3;
   >>             % semicolon supresses output

______________________________________________________________

Operators
---------
1 && 0      % boolean and
1 || 0      % boolean or
1 == 2      % boolean equals
1 ~= 2      % boolean not equals, nb. not !=
xor(1,2)    % boolean exclusive or


Variables
---------
Variables are as in C and other languages
e.g.
   >> a = 3       % a variable is not 3

Strings
-------
Use single quotes for strings
e.g.
   >> b = 'Hello World';

Math Constants & Functions
--------------
There are built-in math constants & functions
e.g.
   >> a = pi;
   >> a
   a = 3.1416

   >> sqrt(2)
   1

Displaying output
------------------
Can use built-in disp function
   >> disp(a)
OR
   >> disp(springf('2 decimals: %0.2f, a))      % similar to C printf format string

______________________________________________________________


Matrices
--------
   >> A = [1 2; 3 4; 5 6]
   A =
      1  2
      3  4
      5  6
OR
   >> A = [1 2;
   > 3 4;
   > 5 6]

   A =
      1  2
      3  4
      5  6

Vectors
-------
   >> v = [ 1 2 3]
   v = 
      1  2  3

n.b. this is also a 1 x 3 matrix

   >> v = [1; 2; 3]
   v =
      1
      2
      3

n.b. this is also a 3 x 1 matrix


Incrementing Vectors
--------------------
   >> v = 1:6        % increment from 1 to 6
   v = 
      1  2  3  4  5  6

   >> v = 1:0.1:2    % increment from by 1 to 2 by 0.1 steps
   v = 
      Columns 1 through 7:
      1.000     1.1000     1.200       % etc...


'Ones'/'Zeros' Array function
---------------------
   >> ones(2,3)
   ans = 
      1  1  1
      1  1  1

   >> C = 2*ones(2,3)
   C = 
      2  2  2
      2  2  2

   >> w = zeros(1,3)
   w = 
      0  0  0


'Rand' Random number matrix function
-------------------------------------
   >> w = rand(1,3)
   w = 
      0.91477     0.14359     0.84860


   >> randn(1,3)
      -0.33517    1.26847     -0.28211


Identity Matrix
---------------
use 'eye' function:
   >> eye(3)
   ans = 
   Diagonal Matrix
      1  0  0
      0  1  0
      0  0  1



Matric functions
-----------------

size()
size(X, 1) refers to the number of rows in X
size(X, 2) would refer to the number of columns in X



______________________________________________________________


Gnuplot
-------
In macintosh to avoid errors about having aquaterm installed, force gnuplot to use x11 instead. Within octave enter:
   >> setenv GNUTERM x11


Histogram with hist()
---------------------
Histogram is opened in gnuplot
   >> w = -6 + sqrt(10)*(randn(1,10000))
   >> hist(w)

OR with more buckets / bins:
   >> hist(w,50)



______________________________________________________________

Control Statement Examples
===========================


For loop
--------


   for i = 1:10,     % equivalent to C's  for(i=1; i<10; i++)
      v(i) = 2^i;
   end;              % have to end statements with end; or endfor;


Alternately ....

   indices = 1:10;
   for i=indices,
      v(i) = 2^i;
   end;


While loop
-----------

   i = 1;
   while i<= 5,
      v(i) = 100;
      i = i+1;
   end;


While, If and Break
--------------------

   i = 1;
   while true,
      v(i) = 999;
      i = i+1;
      if i == 6,
         break;
      end;
   end;


If/Else statement
------------------

   v(1) = 2;
   if v(1) == 1,
      disp('The value is one');
   elseif v(1) == 2,
      disp('The value is two');
   else
      disp('The value is not one or two.');
   end;



Switch statement
-----------------

  switch (X)
    case 1
      do_something ();
    case 2
      do_something_else ();
    otherwise
      do_something_completely_different ();
  endswitch


______________________________________________________________


Defining and Using Functions
=============================

n.b. use dot m (.m) files
e.g. the following could be saved in a file called squareNumber.m

function y = squareNumber(x)
   y = x^2;


note: there is no like that says "return xyz" as in C etc. Rather, the return values are
those that follow 'function'

To call the function, the file must be in the present working directory or search path, then call like this:

>> squareNumber(5)
ans = 25


Return multiple values from a function
---------------------------------------

e.g. Return two values from a function:

function [y1, y2] = squareAndCubeNumber(x)
   y1 = x^2;
   y2 = x^3;


>> [a, b] =squareAndCubeNumber(x)
>> a
ans = 25
>> b
ans = 125

______________________________________________________________


Compute a cost function
=========================

Design a matrix of x-features and y-axis values to use as an example:

X = [1 1; 1 2; 1 3]
y = [1; 2 ; 3]
theta = [0; 1]

function J = costFunctionJ(X, y, theta)

% X is a 'design matrix' containing our training examples
% y is the class labels

m = size(X, 1);               % number of training examples
predictions = X * theta;      % predictions of hypothesis on all m examples
sqrErrors = (predictions - y) .^ 2;    % squared errors

J = 1/(2*m) * sum(sqrErrors);


